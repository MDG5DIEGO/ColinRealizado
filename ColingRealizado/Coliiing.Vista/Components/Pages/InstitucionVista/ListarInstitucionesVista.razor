@page "/instituciones"
@inject IInstitucionService servicioInstitucion
@inject NavigationManager nav
@inject SweetAlertService SweetAlertService



<h3>Listar Instituciones </h3>

<div class="form-group row">
    <div class="col-sm-10">
        <a href="/institucion/crear" class="btn btn-primary m-1">Agregar Nuevo</a>
    </div>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre Institucion</strong></th>
                <th><strong>Tipo</strong></th>
                <th><strong>Direccion</strong></th>
                <th><strong></strong></th>
                <th><strong></strong></th>
            </tr>
        </thead>
        @foreach (var item in Instituciones)
        {
            <tr>
                <td>@item.Nombre</td>
                <td>@item.Tipo</td>
                <td>@item.Direccion</td>
                <td><a href="/institucion/modificar/@item.RowKey" class="btn btn-primary m-1">Modificar</a></td>
                <td><button class="btn btn-danger" @onclick="(e => Eliminar(item.PartitionKey, item.RowKey))">Eliminar</button>
                </td>
            </tr>
            
        }
    </table>
</div>

@code {

    [Parameter]
    public string rowkey { get; set; }
    [Parameter]
    public string partitionkey { get; set; }

    public List<Institucionn> Instituciones { get; set; } = new List<Institucionn>();
    //public bool elin { get; set; }
    protected override async Task OnInitializedAsync()
    {

        var respuesta = await servicioInstitucion.ListaInstitucion();        
        Instituciones = respuesta;
        //await JSRuntime.InvokeVoidAsync("SweetAlert2.initialize");
    
       // await servicioInstitucion.EliminarInstitucion(partitionkey, rowkey);
       // var respuesta1 = await servicioInstitucion.EliminarInstitucion(partitionkey, rowkey);
       // elin = respuesta1;
    }

    private async Task Eliminar(string partitionKey, string rowKey)
    {
        bool eliminado = await servicioInstitucion.EliminarInstitucion(partitionKey, rowKey);
        if (eliminado)
        {
            await SweetAlertService.FireAsync("Éxito", "La institución ha sido eliminada correctamente", SweetAlertIcon.Success);
            // Actualizamos la lista de instituciones después de eliminar
            await OnInitializedAsync();
        }
        else
        {
            await SweetAlertService.FireAsync("Error", "No se pudo eliminar la institución", SweetAlertIcon.Error);
        }
    }

    private void Editar(string rowKey)
    {
        // Redirigir a la página de edición de institución con el ID de la institución a editar
        nav.NavigateTo($"/editar-institucion/{rowKey}");
    }
}
