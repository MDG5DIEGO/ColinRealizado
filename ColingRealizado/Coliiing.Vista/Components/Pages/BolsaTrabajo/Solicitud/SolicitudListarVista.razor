@page "/solicitud"
@inject ISolicitudService serviciooferta
@inject NavigationManager nav
@inject SweetAlertService SweetAlertService



<h3>Listar Oferta</h3>

<div class="form-group row">
    <div class="col-sm-10">
        <a href="/solicitud/crear" class="btn btn-primary m-1">Agregar Nuevo</a>
    </div>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Oferta</strong></th>
                <th><strong>Nombre</strong></th>
                <th><strong>Apellidos</strong></th>
                <th><strong>Curriculum</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong></strong></th>
                <th><strong></strong></th>
            </tr>
        </thead>
        @foreach (var item in solicituds)
        {
            <tr>
                <td>@item.Oferta</td>
                <td>@item.Nombre</td>
                <td>@item.Apellidos</td>
                <th><strong>@item.Curriculum</strong></th>
                <th><strong>@item.Estado</strong></th>
                <td><a href="/solicitud/modificar/@item.RowKey" class="btn btn-primary m-1">Modificar</a></td>
                <td>
                    <button class="btn btn-danger" @onclick="(e => Eliminar(item.PartitionKey, item.RowKey))">Eliminar</button>
                </td>
            </tr>

        }
    </table>
</div>

@code {

    [Parameter]
    public string rowkey { get; set; }
    [Parameter]
    public string partitionkey { get; set; }

    public List<Solicitud> solicituds { get; set; } = new List<Solicitud>();
    //public bool elin { get; set; }
    protected override async Task OnInitializedAsync()
    {

        var respuesta = await serviciooferta.ListaSolicitud();
        solicituds = respuesta;

    }

    private async Task Eliminar(string partitionKey, string rowKey)
    {
        bool eliminado = await serviciooferta.EliminarSolicitud(partitionKey, rowKey);
        if (eliminado)
        {
            await SweetAlertService.FireAsync("Éxito", "Estudio ha sido eliminada correctamente", SweetAlertIcon.Success);
            // Actualizamos la lista de instituciones después de eliminar
            await OnInitializedAsync();
        }
        else
        {
            await SweetAlertService.FireAsync("Error", "No se pudo eliminar el estudio", SweetAlertIcon.Error);
        }
    }

    private void Editar(string rowKey)
    {
        // Redirigir a la página de edición de institución con el ID de la institución a editar
        nav.NavigateTo($"/editar-solicitud/{rowKey}");
    }
}
