@inject SweetAlertService sweet

<h3>Formulario</h3>
<NavigationLock OnBeforeInternalNavigation="AntesDeNavegarInternamente" />
<EditForm EditContext="contextoEdicion" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Afiliado:</label>
        <div>
            <InputText class="form-control" @bind-Value="@estudios.Tipo"></InputText>
            <ValidationMessage For="@(()=>estudios.Tipo)"></ValidationMessage>
        </div>

    </div>
    <div class="mb-3">
        <label>Profesion:</label>
        <div>
            <InputText class="form-control" @bind-Value="@estudios.IdProfesion"></InputText>
            <ValidationMessage For="@(()=>estudios.IdProfesion)"></ValidationMessage>
        </div>

    </div>
    <div class="mb-3">
        <label>Institucion:</label>
        <div>
            <InputText class="form-control" @bind-Value="@estudios.IdInstitucion"></InputText>
            <ValidationMessage For="@(()=>estudios.IdInstitucion)"></ValidationMessage>
        </div>

    </div>
    <div class="mb-3">
        <label>Titulos:</label>
        <div>
            <InputText class="form-control" @bind-Value="@estudios.TituloRecido"></InputText>
            <ValidationMessage For="@(()=>estudios.TituloRecido)"></ValidationMessage>
        </div>

    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-primary" @onclick="Cancelar">Cancelar</button>

</EditForm>

@code {
    private EditContext contextoEdicion = null;
    [Parameter]
    [EditorRequired]
    public Estudios estudios { get; set; } = null;


    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback Cancelar { get; set; }

    public bool formularioPostOk { get; set; }

    protected override void OnInitialized()
    {
        contextoEdicion = new(estudios);
    }
    private async Task AntesDeNavegarInternamente(LocationChangingContext contexto)
    {
        var formularioModificado = contextoEdicion.IsModified();

        if (!formularioModificado || formularioPostOk)
        {
            return;
        }

        var result = await sweet.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "Desea abandonar esta pantalla? Perdera los cambios",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
            return;

        contexto.PreventNavigation();
    }

}
